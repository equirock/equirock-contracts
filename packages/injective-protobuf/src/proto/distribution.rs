// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/distribution/v1beta1/distribution.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Params {
    // message fields
    pub community_tax: ::std::string::String,
    pub base_proposer_reward: ::std::string::String,
    pub bonus_proposer_reward: ::std::string::String,
    pub withdraw_addr_enabled: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // string community_tax = 1;


    pub fn get_community_tax(&self) -> &str {
        &self.community_tax
    }
    pub fn clear_community_tax(&mut self) {
        self.community_tax.clear();
    }

    // Param is passed by value, moved
    pub fn set_community_tax(&mut self, v: ::std::string::String) {
        self.community_tax = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_community_tax(&mut self) -> &mut ::std::string::String {
        &mut self.community_tax
    }

    // Take field
    pub fn take_community_tax(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.community_tax, ::std::string::String::new())
    }

    // string base_proposer_reward = 2;


    pub fn get_base_proposer_reward(&self) -> &str {
        &self.base_proposer_reward
    }
    pub fn clear_base_proposer_reward(&mut self) {
        self.base_proposer_reward.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_proposer_reward(&mut self, v: ::std::string::String) {
        self.base_proposer_reward = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_proposer_reward(&mut self) -> &mut ::std::string::String {
        &mut self.base_proposer_reward
    }

    // Take field
    pub fn take_base_proposer_reward(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_proposer_reward, ::std::string::String::new())
    }

    // string bonus_proposer_reward = 3;


    pub fn get_bonus_proposer_reward(&self) -> &str {
        &self.bonus_proposer_reward
    }
    pub fn clear_bonus_proposer_reward(&mut self) {
        self.bonus_proposer_reward.clear();
    }

    // Param is passed by value, moved
    pub fn set_bonus_proposer_reward(&mut self, v: ::std::string::String) {
        self.bonus_proposer_reward = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bonus_proposer_reward(&mut self) -> &mut ::std::string::String {
        &mut self.bonus_proposer_reward
    }

    // Take field
    pub fn take_bonus_proposer_reward(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bonus_proposer_reward, ::std::string::String::new())
    }

    // bool withdraw_addr_enabled = 4;


    pub fn get_withdraw_addr_enabled(&self) -> bool {
        self.withdraw_addr_enabled
    }
    pub fn clear_withdraw_addr_enabled(&mut self) {
        self.withdraw_addr_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_withdraw_addr_enabled(&mut self, v: bool) {
        self.withdraw_addr_enabled = v;
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.community_tax)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_proposer_reward)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bonus_proposer_reward)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.withdraw_addr_enabled = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.community_tax.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.community_tax);
        }
        if !self.base_proposer_reward.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_proposer_reward);
        }
        if !self.bonus_proposer_reward.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bonus_proposer_reward);
        }
        if self.withdraw_addr_enabled != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.community_tax.is_empty() {
            os.write_string(1, &self.community_tax)?;
        }
        if !self.base_proposer_reward.is_empty() {
            os.write_string(2, &self.base_proposer_reward)?;
        }
        if !self.bonus_proposer_reward.is_empty() {
            os.write_string(3, &self.bonus_proposer_reward)?;
        }
        if self.withdraw_addr_enabled != false {
            os.write_bool(4, self.withdraw_addr_enabled)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.community_tax.clear();
        self.base_proposer_reward.clear();
        self.bonus_proposer_reward.clear();
        self.withdraw_addr_enabled = false;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ValidatorHistoricalRewards {
    // message fields
    pub cumulative_reward_ratio: ::protobuf::RepeatedField<super::coin::DecCoin>,
    pub reference_count: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorHistoricalRewards {
    fn default() -> &'a ValidatorHistoricalRewards {
        <ValidatorHistoricalRewards as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorHistoricalRewards {
    pub fn new() -> ValidatorHistoricalRewards {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1;


    pub fn get_cumulative_reward_ratio(&self) -> &[super::coin::DecCoin] {
        &self.cumulative_reward_ratio
    }
    pub fn clear_cumulative_reward_ratio(&mut self) {
        self.cumulative_reward_ratio.clear();
    }

    // Param is passed by value, moved
    pub fn set_cumulative_reward_ratio(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.cumulative_reward_ratio = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cumulative_reward_ratio(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.cumulative_reward_ratio
    }

    // Take field
    pub fn take_cumulative_reward_ratio(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.cumulative_reward_ratio, ::protobuf::RepeatedField::new())
    }

    // uint32 reference_count = 2;


    pub fn get_reference_count(&self) -> u32 {
        self.reference_count
    }
    pub fn clear_reference_count(&mut self) {
        self.reference_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_reference_count(&mut self, v: u32) {
        self.reference_count = v;
    }
}

impl ::protobuf::Message for ValidatorHistoricalRewards {
    fn is_initialized(&self) -> bool {
        for v in &self.cumulative_reward_ratio {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cumulative_reward_ratio)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.reference_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.cumulative_reward_ratio {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.reference_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.reference_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.cumulative_reward_ratio {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.reference_count != 0 {
            os.write_uint32(2, self.reference_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorHistoricalRewards {
        ValidatorHistoricalRewards::new()
    }

    fn default_instance() -> &'static ValidatorHistoricalRewards {
        static instance: ::protobuf::rt::LazyV2<ValidatorHistoricalRewards> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorHistoricalRewards::new)
    }
}

impl ::protobuf::Clear for ValidatorHistoricalRewards {
    fn clear(&mut self) {
        self.cumulative_reward_ratio.clear();
        self.reference_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorHistoricalRewards {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ValidatorCurrentRewards {
    // message fields
    pub rewards: ::protobuf::RepeatedField<super::coin::DecCoin>,
    pub period: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorCurrentRewards {
    fn default() -> &'a ValidatorCurrentRewards {
        <ValidatorCurrentRewards as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorCurrentRewards {
    pub fn new() -> ValidatorCurrentRewards {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin rewards = 1;


    pub fn get_rewards(&self) -> &[super::coin::DecCoin] {
        &self.rewards
    }
    pub fn clear_rewards(&mut self) {
        self.rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_rewards(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rewards(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.rewards
    }

    // Take field
    pub fn take_rewards(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.rewards, ::protobuf::RepeatedField::new())
    }

    // uint64 period = 2;


    pub fn get_period(&self) -> u64 {
        self.period
    }
    pub fn clear_period(&mut self) {
        self.period = 0;
    }

    // Param is passed by value, moved
    pub fn set_period(&mut self, v: u64) {
        self.period = v;
    }
}

impl ::protobuf::Message for ValidatorCurrentRewards {
    fn is_initialized(&self) -> bool {
        for v in &self.rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rewards)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.period = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.period != 0 {
            my_size += ::protobuf::rt::value_size(2, self.period, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rewards {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.period != 0 {
            os.write_uint64(2, self.period)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorCurrentRewards {
        ValidatorCurrentRewards::new()
    }

    fn default_instance() -> &'static ValidatorCurrentRewards {
        static instance: ::protobuf::rt::LazyV2<ValidatorCurrentRewards> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorCurrentRewards::new)
    }
}

impl ::protobuf::Clear for ValidatorCurrentRewards {
    fn clear(&mut self) {
        self.rewards.clear();
        self.period = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorCurrentRewards {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ValidatorAccumulatedCommission {
    // message fields
    pub commission: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorAccumulatedCommission {
    fn default() -> &'a ValidatorAccumulatedCommission {
        <ValidatorAccumulatedCommission as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorAccumulatedCommission {
    pub fn new() -> ValidatorAccumulatedCommission {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin commission = 1;


    pub fn get_commission(&self) -> &[super::coin::DecCoin] {
        &self.commission
    }
    pub fn clear_commission(&mut self) {
        self.commission.clear();
    }

    // Param is passed by value, moved
    pub fn set_commission(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.commission = v;
    }

    // Mutable pointer to the field.
    pub fn mut_commission(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.commission
    }

    // Take field
    pub fn take_commission(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.commission, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ValidatorAccumulatedCommission {
    fn is_initialized(&self) -> bool {
        for v in &self.commission {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.commission)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.commission {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.commission {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorAccumulatedCommission {
        ValidatorAccumulatedCommission::new()
    }

    fn default_instance() -> &'static ValidatorAccumulatedCommission {
        static instance: ::protobuf::rt::LazyV2<ValidatorAccumulatedCommission> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorAccumulatedCommission::new)
    }
}

impl ::protobuf::Clear for ValidatorAccumulatedCommission {
    fn clear(&mut self) {
        self.commission.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorAccumulatedCommission {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ValidatorOutstandingRewards {
    // message fields
    pub rewards: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorOutstandingRewards {
    fn default() -> &'a ValidatorOutstandingRewards {
        <ValidatorOutstandingRewards as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorOutstandingRewards {
    pub fn new() -> ValidatorOutstandingRewards {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin rewards = 1;


    pub fn get_rewards(&self) -> &[super::coin::DecCoin] {
        &self.rewards
    }
    pub fn clear_rewards(&mut self) {
        self.rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_rewards(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rewards(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.rewards
    }

    // Take field
    pub fn take_rewards(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.rewards, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ValidatorOutstandingRewards {
    fn is_initialized(&self) -> bool {
        for v in &self.rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rewards)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rewards {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorOutstandingRewards {
        ValidatorOutstandingRewards::new()
    }

    fn default_instance() -> &'static ValidatorOutstandingRewards {
        static instance: ::protobuf::rt::LazyV2<ValidatorOutstandingRewards> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorOutstandingRewards::new)
    }
}

impl ::protobuf::Clear for ValidatorOutstandingRewards {
    fn clear(&mut self) {
        self.rewards.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorOutstandingRewards {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ValidatorSlashEvent {
    // message fields
    pub validator_period: u64,
    pub fraction: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorSlashEvent {
    fn default() -> &'a ValidatorSlashEvent {
        <ValidatorSlashEvent as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorSlashEvent {
    pub fn new() -> ValidatorSlashEvent {
        ::std::default::Default::default()
    }

    // uint64 validator_period = 1;


    pub fn get_validator_period(&self) -> u64 {
        self.validator_period
    }
    pub fn clear_validator_period(&mut self) {
        self.validator_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_validator_period(&mut self, v: u64) {
        self.validator_period = v;
    }

    // string fraction = 2;


    pub fn get_fraction(&self) -> &str {
        &self.fraction
    }
    pub fn clear_fraction(&mut self) {
        self.fraction.clear();
    }

    // Param is passed by value, moved
    pub fn set_fraction(&mut self, v: ::std::string::String) {
        self.fraction = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fraction(&mut self) -> &mut ::std::string::String {
        &mut self.fraction
    }

    // Take field
    pub fn take_fraction(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fraction, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ValidatorSlashEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.validator_period = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fraction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.validator_period != 0 {
            my_size += ::protobuf::rt::value_size(1, self.validator_period, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.fraction.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.fraction);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.validator_period != 0 {
            os.write_uint64(1, self.validator_period)?;
        }
        if !self.fraction.is_empty() {
            os.write_string(2, &self.fraction)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorSlashEvent {
        ValidatorSlashEvent::new()
    }

    fn default_instance() -> &'static ValidatorSlashEvent {
        static instance: ::protobuf::rt::LazyV2<ValidatorSlashEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorSlashEvent::new)
    }
}

impl ::protobuf::Clear for ValidatorSlashEvent {
    fn clear(&mut self) {
        self.validator_period = 0;
        self.fraction.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorSlashEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ValidatorSlashEvents {
    // message fields
    pub validator_slash_events: ::protobuf::RepeatedField<ValidatorSlashEvent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorSlashEvents {
    fn default() -> &'a ValidatorSlashEvents {
        <ValidatorSlashEvents as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorSlashEvents {
    pub fn new() -> ValidatorSlashEvents {
        ::std::default::Default::default()
    }

    // repeated .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_events = 1;


    pub fn get_validator_slash_events(&self) -> &[ValidatorSlashEvent] {
        &self.validator_slash_events
    }
    pub fn clear_validator_slash_events(&mut self) {
        self.validator_slash_events.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_slash_events(&mut self, v: ::protobuf::RepeatedField<ValidatorSlashEvent>) {
        self.validator_slash_events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_validator_slash_events(&mut self) -> &mut ::protobuf::RepeatedField<ValidatorSlashEvent> {
        &mut self.validator_slash_events
    }

    // Take field
    pub fn take_validator_slash_events(&mut self) -> ::protobuf::RepeatedField<ValidatorSlashEvent> {
        ::std::mem::replace(&mut self.validator_slash_events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ValidatorSlashEvents {
    fn is_initialized(&self) -> bool {
        for v in &self.validator_slash_events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.validator_slash_events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.validator_slash_events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.validator_slash_events {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorSlashEvents {
        ValidatorSlashEvents::new()
    }

    fn default_instance() -> &'static ValidatorSlashEvents {
        static instance: ::protobuf::rt::LazyV2<ValidatorSlashEvents> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorSlashEvents::new)
    }
}

impl ::protobuf::Clear for ValidatorSlashEvents {
    fn clear(&mut self) {
        self.validator_slash_events.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorSlashEvents {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct FeePool {
    // message fields
    pub community_pool: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeePool {
    fn default() -> &'a FeePool {
        <FeePool as ::protobuf::Message>::default_instance()
    }
}

impl FeePool {
    pub fn new() -> FeePool {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin community_pool = 1;


    pub fn get_community_pool(&self) -> &[super::coin::DecCoin] {
        &self.community_pool
    }
    pub fn clear_community_pool(&mut self) {
        self.community_pool.clear();
    }

    // Param is passed by value, moved
    pub fn set_community_pool(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.community_pool = v;
    }

    // Mutable pointer to the field.
    pub fn mut_community_pool(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.community_pool
    }

    // Take field
    pub fn take_community_pool(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.community_pool, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FeePool {
    fn is_initialized(&self) -> bool {
        for v in &self.community_pool {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.community_pool)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.community_pool {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.community_pool {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeePool {
        FeePool::new()
    }

    fn default_instance() -> &'static FeePool {
        static instance: ::protobuf::rt::LazyV2<FeePool> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeePool::new)
    }
}

impl ::protobuf::Clear for FeePool {
    fn clear(&mut self) {
        self.community_pool.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for FeePool {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CommunityPoolSpendProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub recipient: ::std::string::String,
    pub amount: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommunityPoolSpendProposal {
    fn default() -> &'a CommunityPoolSpendProposal {
        <CommunityPoolSpendProposal as ::protobuf::Message>::default_instance()
    }
}

impl CommunityPoolSpendProposal {
    pub fn new() -> CommunityPoolSpendProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string recipient = 3;


    pub fn get_recipient(&self) -> &str {
        &self.recipient
    }
    pub fn clear_recipient(&mut self) {
        self.recipient.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipient(&mut self, v: ::std::string::String) {
        self.recipient = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipient(&mut self) -> &mut ::std::string::String {
        &mut self.recipient
    }

    // Take field
    pub fn take_recipient(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.recipient, ::std::string::String::new())
    }

    // repeated .cosmos.base.v1beta1.Coin amount = 4;


    pub fn get_amount(&self) -> &[super::coin::Coin] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.amount, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CommunityPoolSpendProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.recipient)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.recipient.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.recipient);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.recipient.is_empty() {
            os.write_string(3, &self.recipient)?;
        }
        for v in &self.amount {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommunityPoolSpendProposal {
        CommunityPoolSpendProposal::new()
    }

    fn default_instance() -> &'static CommunityPoolSpendProposal {
        static instance: ::protobuf::rt::LazyV2<CommunityPoolSpendProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommunityPoolSpendProposal::new)
    }
}

impl ::protobuf::Clear for CommunityPoolSpendProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.recipient.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CommunityPoolSpendProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct DelegatorStartingInfo {
    // message fields
    pub previous_period: u64,
    pub stake: ::std::string::String,
    pub height: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DelegatorStartingInfo {
    fn default() -> &'a DelegatorStartingInfo {
        <DelegatorStartingInfo as ::protobuf::Message>::default_instance()
    }
}

impl DelegatorStartingInfo {
    pub fn new() -> DelegatorStartingInfo {
        ::std::default::Default::default()
    }

    // uint64 previous_period = 1;


    pub fn get_previous_period(&self) -> u64 {
        self.previous_period
    }
    pub fn clear_previous_period(&mut self) {
        self.previous_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_previous_period(&mut self, v: u64) {
        self.previous_period = v;
    }

    // string stake = 2;


    pub fn get_stake(&self) -> &str {
        &self.stake
    }
    pub fn clear_stake(&mut self) {
        self.stake.clear();
    }

    // Param is passed by value, moved
    pub fn set_stake(&mut self, v: ::std::string::String) {
        self.stake = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stake(&mut self) -> &mut ::std::string::String {
        &mut self.stake
    }

    // Take field
    pub fn take_stake(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stake, ::std::string::String::new())
    }

    // uint64 height = 3;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }
}

impl ::protobuf::Message for DelegatorStartingInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.previous_period = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stake)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.previous_period != 0 {
            my_size += ::protobuf::rt::value_size(1, self.previous_period, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.stake.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.stake);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.previous_period != 0 {
            os.write_uint64(1, self.previous_period)?;
        }
        if !self.stake.is_empty() {
            os.write_string(2, &self.stake)?;
        }
        if self.height != 0 {
            os.write_uint64(3, self.height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DelegatorStartingInfo {
        DelegatorStartingInfo::new()
    }

    fn default_instance() -> &'static DelegatorStartingInfo {
        static instance: ::protobuf::rt::LazyV2<DelegatorStartingInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DelegatorStartingInfo::new)
    }
}

impl ::protobuf::Clear for DelegatorStartingInfo {
    fn clear(&mut self) {
        self.previous_period = 0;
        self.stake.clear();
        self.height = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for DelegatorStartingInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct DelegationDelegatorReward {
    // message fields
    pub validator_address: ::std::string::String,
    pub reward: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DelegationDelegatorReward {
    fn default() -> &'a DelegationDelegatorReward {
        <DelegationDelegatorReward as ::protobuf::Message>::default_instance()
    }
}

impl DelegationDelegatorReward {
    pub fn new() -> DelegationDelegatorReward {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // repeated .cosmos.base.v1beta1.DecCoin reward = 2;


    pub fn get_reward(&self) -> &[super::coin::DecCoin] {
        &self.reward
    }
    pub fn clear_reward(&mut self) {
        self.reward.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.reward = v;
    }

    // Mutable pointer to the field.
    pub fn mut_reward(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.reward
    }

    // Take field
    pub fn take_reward(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.reward, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DelegationDelegatorReward {
    fn is_initialized(&self) -> bool {
        for v in &self.reward {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.reward)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        for value in &self.reward {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        for v in &self.reward {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DelegationDelegatorReward {
        DelegationDelegatorReward::new()
    }

    fn default_instance() -> &'static DelegationDelegatorReward {
        static instance: ::protobuf::rt::LazyV2<DelegationDelegatorReward> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DelegationDelegatorReward::new)
    }
}

impl ::protobuf::Clear for DelegationDelegatorReward {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.reward.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for DelegationDelegatorReward {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CommunityPoolSpendProposalWithDeposit {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub recipient: ::std::string::String,
    pub amount: ::std::string::String,
    pub deposit: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommunityPoolSpendProposalWithDeposit {
    fn default() -> &'a CommunityPoolSpendProposalWithDeposit {
        <CommunityPoolSpendProposalWithDeposit as ::protobuf::Message>::default_instance()
    }
}

impl CommunityPoolSpendProposalWithDeposit {
    pub fn new() -> CommunityPoolSpendProposalWithDeposit {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string recipient = 3;


    pub fn get_recipient(&self) -> &str {
        &self.recipient
    }
    pub fn clear_recipient(&mut self) {
        self.recipient.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipient(&mut self, v: ::std::string::String) {
        self.recipient = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipient(&mut self) -> &mut ::std::string::String {
        &mut self.recipient
    }

    // Take field
    pub fn take_recipient(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.recipient, ::std::string::String::new())
    }

    // string amount = 4;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // string deposit = 5;


    pub fn get_deposit(&self) -> &str {
        &self.deposit
    }
    pub fn clear_deposit(&mut self) {
        self.deposit.clear();
    }

    // Param is passed by value, moved
    pub fn set_deposit(&mut self, v: ::std::string::String) {
        self.deposit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit(&mut self) -> &mut ::std::string::String {
        &mut self.deposit
    }

    // Take field
    pub fn take_deposit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deposit, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CommunityPoolSpendProposalWithDeposit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.recipient)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deposit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.recipient.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.recipient);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.amount);
        }
        if !self.deposit.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.deposit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.recipient.is_empty() {
            os.write_string(3, &self.recipient)?;
        }
        if !self.amount.is_empty() {
            os.write_string(4, &self.amount)?;
        }
        if !self.deposit.is_empty() {
            os.write_string(5, &self.deposit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommunityPoolSpendProposalWithDeposit {
        CommunityPoolSpendProposalWithDeposit::new()
    }

    fn default_instance() -> &'static CommunityPoolSpendProposalWithDeposit {
        static instance: ::protobuf::rt::LazyV2<CommunityPoolSpendProposalWithDeposit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommunityPoolSpendProposalWithDeposit::new)
    }
}

impl ::protobuf::Clear for CommunityPoolSpendProposalWithDeposit {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.recipient.clear();
        self.amount.clear();
        self.deposit.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CommunityPoolSpendProposalWithDeposit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
